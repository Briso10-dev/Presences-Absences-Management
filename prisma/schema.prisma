// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Models
// Employee table
model Employee {
  employeeID    String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String  @unique
  password String
  poste String
  salary Int
   // An employee can have zero/many presence
  presence Presence[]
  // Am employee can have zero/many abscences
  abscences Absence[]
  // An employee receives zero/many notifications
  notification Notification[]
}
// Presences table
model Presence{
  presenceID    String  @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime
  startingHour DateTime?
  endingHour DateTime?
  // A presence concerns one employee
  empPresenceID String @db.ObjectId
  empPresence Employee @relation(fields: [empPresenceID],references: [employeeID])
  //An employee's presence is concern with just one report(after a period gets another one)
  repPresenceID String @db.ObjectId
  repPresence Report @relation(fields: [repPresenceID],references: [reportID]) 
}
// abscences table
model Absence{
  absenceID    String  @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime
  absenceHour Int @default(0)
  // An absence concerns one employee
  empAbsenceID String @db.ObjectId
  empAbsence Employee @relation(fields: [empAbsenceID],references: [employeeID])
  //An employee's absence is concern with just one report(after a period gets another one)
  repAbsenceID String @db.ObjectId
  repAbsence Report @relation(fields: [repAbsenceID],references: [reportID])   
}
// notifications table
model Notification{
  notificationID    String  @id @default(auto()) @map("_id") @db.ObjectId
  message String
  // A notification concerns one employee
  empNotifID String @db.ObjectId
  empNotif Employee @relation(fields: [empNotifID],references: [employeeID])
  // A notification concerns the only direction there
  dirNotifID String @db.ObjectId
  dirNotif Direction @relation(fields: [dirNotifID],references: [directionID])    
}
// model report to actually having employee's info
model Report{
  reportID  String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  period Periodicity
  //A report is on zero/many employees's presence
  attendances Presence[]
  //A report is on zero/many employees's absence
  absences Absence[]
}
// model direction pour l'envoie du mail
model Direction{
  directionID String  @id @default(auto()) @map("_id") @db.ObjectId
  dirName String
  numDirection Int
  // A Direction receives zero/many notifications
  notification Notification[]
}

// enum list
enum Periodicity{
  weekly
  monthly
}